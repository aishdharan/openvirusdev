<?xml version="1.0" encoding="UTF-8"?>
<p id="d1e7588">We solve the optimization problem 
 <xref rid="fd14" ref-type="disp-formula">(14)</xref> using simulated annealing. We use the built-in simulated annealing algorithms in Matlab/Octave. The source code is obtainable via an online repository 
 <xref rid="b24" ref-type="bibr">[24]</xref>. During each round of simulated annealing, a random set of controls 
 <inline-formula>
  <math id="d1e7599" display="inline" altimg="si149.svg">
   <mrow>
    <mo>{</mo>
    <msub>
     <mrow>
      <mi mathvariant="bold-fraktur">u</mi>
     </mrow>
     <mrow>
      <mn>1</mn>
     </mrow>
    </msub>
    <mo>,</mo>
    <mo>…</mo>
    <mo>,</mo>
    <msub>
     <mrow>
      <mi mathvariant="bold-fraktur">u</mi>
     </mrow>
     <mrow>
      <mi mathvariant="bold-fraktur">n</mi>
     </mrow>
    </msub>
    <mo>,</mo>
    <msub>
     <mrow>
      <mi mathvariant="bold-fraktur">t</mi>
     </mrow>
     <mrow>
      <mi mathvariant="bold-fraktur">s</mi>
      <mn>1</mn>
     </mrow>
    </msub>
    <mo>,</mo>
    <mo>…</mo>
    <mo>,</mo>
    <msub>
     <mrow>
      <mi mathvariant="bold-fraktur">t</mi>
     </mrow>
     <mrow>
      <mi mathvariant="bold-fraktur">s</mi>
      <mo>,</mo>
      <mi mathvariant="bold-fraktur">n</mi>
      <mo>−</mo>
      <mn>1</mn>
     </mrow>
    </msub>
    <mo>}</mo>
   </mrow>
  </math>
 </inline-formula> is drawn from the feasible values. The model 
 <xref rid="fd1j" ref-type="disp-formula">(1j)</xref> is then solved numerically using ODE45 in Matlab/Octave and the penalty function 
 <xref rid="fd11" ref-type="disp-formula">(11)</xref> is calculated. Extra terms are added to the penalty function for cases where the choice of controls causes the constraints 
 <xref rid="fd12" ref-type="disp-formula">(12)</xref>–
 <xref rid="fd13" ref-type="disp-formula">(13)</xref> to be breached. The simulated annealing algorithm generates successive random sets of controls until a global minimum value of the penalty function is attained. Simulated annealing is guaranteed asymptotically to converge to the global minimum — more precisely, for any finite-dimensional problem, the probability that the simulated annealing algorithm terminates with a global optimal solution approaches 1 as the annealing schedule is extended 
 <xref rid="b25" ref-type="bibr">[25]</xref>. In practice, the convergence can be very slow, and the Matlab/Octave codes employ built-in stopping criteria to confirm if a global minimum has been reached. These built-in stopping criteria can occasionally cause the simulated-annealing algorithm to converge before the attainment of the global minimum. We have checked this by comparing the results of the simulated annealing with other fundamentally different optimization methods with independent stopping criteria (e.g. particle-swarm optimization), and the results are the same. This inspires confidence in our numerical method, although the absence of theoretical analysis of the optimal control problem 
 <xref rid="fd14" ref-type="disp-formula">(14)</xref> at this time means that our results should be treated with some care.
</p>
